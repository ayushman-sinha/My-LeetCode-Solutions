{"id":570507467,"lang":"cpp","time":"1 month, 1 week","timestamp":1634115636,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/570507467/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n   \n    TreeNode *bst(TreeNode *root,int ele)\n    {\n        if(!root)\n            return root=new TreeNode(ele);\n        if(root->val>ele)\n        {\n            root->left=bst(root->left,ele);\n        }\n        else\n        {\n            root->right=bst(root->right,ele);\n        }\n        return root;\n        \n        \n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        TreeNode *root=nullptr;\n      for(int i=0;i<preorder.size();i++)\n      {\n          root=bst(root,preorder[i]);\n      }\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}