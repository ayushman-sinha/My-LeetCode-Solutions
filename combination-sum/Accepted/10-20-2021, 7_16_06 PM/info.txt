{"id":574325445,"lang":"cpp","time":"1Â month","timestamp":1634737566,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/574325445/","is_pending":"Not Pending","title":"Combination Sum","memory":"79.6 MB","code":"class Solution {\npublic:\n    vector<vector<int>>anus;//to store the answer\n    void comboSum(vector<int>&candidates,int i,int tmp,int target, vector<int>sum)\n    {\n        if(tmp>target||i==candidates.size())/*base case. Whenever sum exceeds the target sum or the control exceeds the last                                                index*/\n        { \n            return;\n        }\n        if(tmp==target)//iftarget==tmp we push the vector into answer vector\n        {\n            anus.push_back(sum);\n           return;\n        }\n        tmp+=candidates[i];//finding the sum\n        sum.push_back(candidates[i]);//pushing each element into a vector\n        comboSum(candidates,i,tmp,target,sum);//calling the recursive function to find the next sum\n        tmp-=candidates[i];/*Backtracing and popping the last added elements*/\n        sum.pop_back();\n         comboSum(candidates,i+1,tmp,target,sum);//incrementing the control variable by one to access the next element\n        \n    }\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        vector<int>sum;\n        comboSum(candidates,0,0,target,sum);//recursive function\n        return anus;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum"}