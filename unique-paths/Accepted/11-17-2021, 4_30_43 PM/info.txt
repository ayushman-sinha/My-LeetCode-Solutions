{"id":588545752,"lang":"cpp","time":"4 days, 2 hours","timestamp":1637146843,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/588545752/","is_pending":"Not Pending","title":"Unique Paths","memory":"6.7 MB","code":"class Solution {\npublic:\n    int c=0;\n    void bfs(vector<vector<int>>&grid)\n    {\n        int m=grid.size();\n        int n=grid[0].size();\n        queue<pair<int,int>>q;\n        q.push({0,0});\n        while(!q.empty())\n        {\n            int size=q.size();c++;\n           \n                int a=q.front().first;\n                int b=q.front().second;\n                q.pop();\n                if(a==m||b==n||grid[a][b]>1)                                \n                  continue;                \n                if(a-1>=0&&b-1>=0)\n                 grid[a][b]=grid[a-1][b]+grid[a][b-1];\n                \n              q.push({a+1,b});\n                q.push({a,b+1});\n            }\n        \n    }\n    int uniquePaths(int m, int n) {\n        vector<vector<int>>grid(m, vector<int>(n,1));\n        bfs(grid);\n        /*\n        cout<<c<<\"\\n\";\n        for(int i=0;i<m;i++)\n        {\n            for(int j=0;j<n;j++)\n                cout<<grid[i][j]<<\" \";\n            cout<<\"\\n\";\n        }\n        */\n      return grid[m-1][n-1];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-paths"}