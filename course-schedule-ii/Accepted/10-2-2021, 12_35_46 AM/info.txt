{"id":564138199,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1633115146,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/564138199/","is_pending":"Not Pending","title":"Course Schedule II","memory":"17.5 MB","code":"class Solution {\npublic:\n    int v;\n    list<int>*adj;\n   vector<int>q;\n    void addEdges(int u,int v)\n    {\n        adj[u].push_back(v);\n    }\n    void topoHelper(int s,vector<bool>&visited)\n    {\n        visited[s]=true;\n        for(auto i=adj[s].begin();i!=adj[s].end();i++)\n        {\n            if(visited[*i]==false)\n            {\n                topoHelper(*i,visited);\n            }\n        }\n       q.push_back(s);\n    }\n    bool isCyclic(int s,vector<bool>&visited,vector<bool>stk)//For detecting cycles in the Directed Graph\n    {\n        if(visited[s]==false)\n        {\n            visited[s]=true;\n            stk[s]=true;\n            for(auto i=adj[s].begin();i!=adj[s].end();i++)\n            {\n                if(visited[*i]==false&&(isCyclic(*i,visited,stk)==true))\n                    return true;\n                else if(stk[*i]==true)\n                    return true;\n            }\n        }\n        stk[s]=false;\n        return false;\n        \n    }\n    void topo_sort(vector<bool>&visited)//Topological Sort\n    {\n       \n        for(int i=0;i<v;i++)\n        {\n            if(visited[i]==false)\n                topoHelper(i,visited);\n        }\n        \n        \n    }\n        \n    vector<int> findOrder(int numCourses, vector<vector<int>>&prerequisites) {\n        v=numCourses;\n        adj=new list<int>[v];\n        for(int i=0;i<prerequisites.size();i++)\n        {\n            addEdges(prerequisites[i][0],prerequisites[i][1]);//adding the edges to a graph\n        }\n         vector<bool>visited(v,false);\n        vector<bool>visited1(v,false);\n        vector<bool>stk(v,false);\n        for(int i=0;i<v;i++)\n        {\n            if(isCyclic(i,visited,stk))\n                return (vector<int>());/*if a cycle is present then there can be no answer since topological                                             sort can only be performed with   DAG */\n        }      \n        topo_sort(visited1);//Topological Sort\n       \n     \n        return q;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}