{"id":550250164,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1630912127,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/550250164/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*>bst;\n    void calc(TreeNode *root)\n    {\n        if(root==nullptr)\n            return;\n        calc(root->left);\n         TreeNode* newnode = new TreeNode(0);\n        newnode->val = root->val;\n        bst.push_back(newnode);\n        calc(root->right);\n        \n    }\n\n    TreeNode *form_bst()\n    {\n        TreeNode *new_root=nullptr;\n       int i=0;\n     \n        for( i=0;i<bst.size()-1;i++)\n        {\n          \n            bst[i]->right=bst[i+1];           \n            \n         }\n        bst[i]->right=nullptr;\n\n        return bst[0];\n        \n        \n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        calc(root);\n        return(form_bst());\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}